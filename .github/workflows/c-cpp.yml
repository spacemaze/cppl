name: C/C++ CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs: 
  build:

    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          # - { name: "Windows MSVC", os: windows-latest, cc: "cl", cxx: "cl" }
          - { name: "Ubuntu gcc", os: ubuntu-18.04, cc: "gcc", cxx: "g++", release_name: "cppl-linux-x86_64" }
          - { name: "MacOS", os: macos-10.15, bootstrap: false, release_name: "cppl-darwin-x86_64" }

    steps:

    # Install Ninja
    - name: macos.install-ninja
      if: matrix.config.os == 'macos-10.15'
      run: |
        brew install ninja
    - name: linux.install-ninja
      if: matrix.config.os == 'ubuntu-18.04'
      run: sudo apt-get install -y ninja-build

    - name: posix.check-ninja
      if: matrix.config.os != 'windows-latest'
      shell: bash
      run: |
        if [[ "$(which ninja)" == "" ]]; then
          echo "Ninja not found"
          exit 1
        else
          echo "Ninja: $(which ninja)"    
        fi  
      
    # Environment
    - name: Print environment
      if: matrix.config.os != 'windows-latest'
      run: |
        echo "Building with following environment:"
        env

    # Download toolchain (macos only)
    - name: macos.download-clang
      if: matrix.config.os == 'macos-10.15' && !matrix.config.bootstrap
      run: |
        wget https://github.com/llvm/llvm-project/releases/download/llvmorg-9.0.1/clang+llvm-9.0.1-x86_64-apple-darwin.tar.xz
        tar xvf clang+llvm-9.0.1-x86_64-apple-darwin.tar.xz      
    - name: macos.rename-clang
      if: matrix.config.os == 'macos-10.15' && !matrix.config.bootstrap
      run: |
        mv clang+llvm-9.0.1-x86_64-apple-darwin ${{ runner.workspace }}/phase1
    - name: macos.xcode-select
      if: matrix.config.os == 'macos-10.15'
      run: |
        sudo xcode-select -s /Library/Developer/CommandLineTools
        echo "Selected Command Line Tools"
        echo "Available SDKs:"
        ls /Library/Developer/CommandLineTools/SDKs
        echo "Following compiler will be used:"
        clang --version
                
    # Checkout sources            
                
    - name: Checkout sources
      uses: actions/checkout@v2
        
    ####################################
    # Bootstrap
    ####################################     
      
    - name: macos.phase-1.cmake
      if: matrix.config.os == 'macos-10.15' && matrix.config.bootstrap
      run: |
        mkdir -p ${{ runner.workspace }}/build-phase1
        cd ${{ runner.workspace }}/build-phase1
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX=${{ runner.workspace }}/phase1 \
              -DLLVM_ENABLE_LLD=ON \
              -DLLVM_ENABLE_PROJECTS="clang;lld" \
              -G "Ninja" ${{ runner.workspace }}/cppl/llvm

    - name: macos.phase-1.build-clang
      if: matrix.config.os == 'macos-10.15' && matrix.config.bootstrap
      run: |
        cd ${{ runner.workspace }}/build-phase1
        ninja -j4 clang

    - name: macos.phase-1.build-lld
      if: matrix.config.os == 'macos-10.15' && matrix.config.bootstrap
      run: |
        cd ${{ runner.workspace }}/build-phase1
        ninja -j4 lld

    - name: macos.phase-1.build-rest
      if: matrix.config.os == 'macos-10.15' && matrix.config.bootstrap
      run: |
        cd ${{ runner.workspace }}/build-phase1
        ninja -j4

    - name: macos.phase-1.install
      if: matrix.config.os == 'macos-10.15' && matrix.config.bootstrap
      run: |
        cd ${{ runner.workspace }}/build-phase1
        ninja -j4 install
        
    ####################################
    # End of bootstrap
    ####################################     

    # Final phase, run cmake

    - name: macos.phase-final.cmake
      if: matrix.config.os == 'macos-10.15'
      run: |
        mkdir -p ${{ runner.workspace }}/build-final
        cd ${{ runner.workspace }}/build-final
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX=${{ runner.workspace }}/${{ matrix.config.release_name }} \
              -DCMAKE_C_COMPILER=${{ runner.workspace }}/phase1/bin/clang \
              -DCMAKE_CXX_COMPILER=${{ runner.workspace }}/phase1/bin/clang++ \
              -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13 \
              -DLLVM_ENABLE_PROJECTS="clang" \
              -G "Ninja" ${{ runner.workspace }}/cppl/llvm

    - name: linux.phase-final.cmake
      if: matrix.config.os == 'ubuntu-18.04'
      run: |
        mkdir -p ${{ runner.workspace }}/build-final
        cd ${{ runner.workspace }}/build-final
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX=${{ runner.workspace }}/${{ matrix.config.release_name }} \
              -DLLVM_ENABLE_PROJECTS="clang" \
              -G "Ninja" ${{ runner.workspace }}/cppl/llvm

#     - name: macos.phase-final.build-cxx
#       if: matrix.config.os == 'macos-10.15'
#       run: |
#         cd ${{ runner.workspace }}/build-final
#         ninja -j4 cxxabi cxx

    # Final phase, run build

    - name: phase-final.build-clang
      if: matrix.config.os == 'macos-10.15' || matrix.config.os == 'ubuntu-18.04'
      run: |
        cd ${{ runner.workspace }}/build-final
        ninja -j4 clang

#     - name: Archive build files
#       if: matrix.config.os == 'macos-10.15'
#       run: |
#         cd ${{ runner.workspace }}
#         tar pczf \
#             ${{ runner.workspace }}/build-final.tgz \
#             ${{ runner.workspace }}/build-final
#          
#     - name: Upload a Build Files Artifact
#       if: matrix.config.os == 'macos-10.15'
#       uses: actions/upload-artifact@v2
#       with:
#         # Artifact name
#         name: build-final
#         # A file, directory or wildcard pattern that describes what to upload
#         path: ${{ runner.workspace }}/build-final.tgz

    # Final phase, run install

    - name: phase-final.install
      if: matrix.config.os == 'macos-10.15' || matrix.config.os == 'ubuntu-18.04'
      run: |
        cd ${{ runner.workspace }}/build-final
        ninja -j4 install-clang

    # Final phase, create artifact 

    - name: Archive installation
      if: matrix.config.os == 'macos-10.15' || matrix.config.os == 'ubuntu-18.04'
      run: |
        tar pczf \
            ${{ runner.workspace }}/${{ matrix.config.release_name }}.tgz \
            -C ${{ runner.workspace }} ${{ matrix.config.release_name }}

    - name: Upload installation artifact
      if: matrix.config.os == 'macos-10.15' || matrix.config.os == 'ubuntu-18.04'
      uses: actions/upload-artifact@v2
      with:
        # Artifact name
        name: ${{ matrix.config.release_name }}
        # A file, directory or wildcard pattern that describes what to upload
        path: ${{ runner.workspace }}/${{ matrix.config.release_name }}.tgz
        
    # Final phase, check
      
    - name: Check
      if: matrix.config.os == 'macos-10.15' || matrix.config.os == 'ubuntu-18.04'
      run: |
        cd ${{ runner.workspace }}/build-final
        ninja -j4 check-clang
